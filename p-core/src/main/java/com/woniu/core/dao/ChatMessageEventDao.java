package com.woniu.core.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.woniu.core.xmpp.rxbus.event.ChatMessageEvent;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_MESSAGE_EVENT".
*/
public class ChatMessageEventDao extends AbstractDao<ChatMessageEvent, Long> {

    public static final String TABLENAME = "CHAT_MESSAGE_EVENT";

    /**
     * Properties of entity ChatMessageEvent.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FromUserID = new Property(1, String.class, "fromUserID", false, "FROM_USER_ID");
        public final static Property ToUserID = new Property(2, String.class, "toUserID", false, "TO_USER_ID");
        public final static Property MessageContent = new Property(3, String.class, "messageContent", false, "MESSAGE_CONTENT");
        public final static Property MessageType = new Property(4, int.class, "messageType", false, "MESSAGE_TYPE");
        public final static Property ImageHeight = new Property(5, int.class, "imageHeight", false, "IMAGE_HEIGHT");
        public final static Property ImageWidth = new Property(6, int.class, "imageWidth", false, "IMAGE_WIDTH");
        public final static Property VoiceDuration = new Property(7, int.class, "voiceDuration", false, "VOICE_DURATION");
        public final static Property Avatar = new Property(8, String.class, "avatar", false, "AVATAR");
        public final static Property Nickname = new Property(9, String.class, "nickname", false, "NICKNAME");
        public final static Property ChatUserID = new Property(10, String.class, "chatUserID", false, "CHAT_USER_ID");
        public final static Property CreateTime = new Property(11, long.class, "createTime", false, "CREATE_TIME");
        public final static Property VoiceIsRead = new Property(12, boolean.class, "voiceIsRead", false, "VOICE_IS_READ");
        public final static Property RedEnvelopesTitle = new Property(13, String.class, "redEnvelopesTitle", false, "RED_ENVELOPES_TITLE");
        public final static Property GroupNickName = new Property(14, String.class, "groupNickName", false, "GROUP_NICK_NAME");
        public final static Property GroupName = new Property(15, String.class, "groupName", false, "GROUP_NAME");
        public final static Property GroupAvatar = new Property(16, String.class, "groupAvatar", false, "GROUP_AVATAR");
        public final static Property UserId = new Property(17, long.class, "userId", false, "USER_ID");
        public final static Property InvitationGroupName = new Property(18, String.class, "invitationGroupName", false, "INVITATION_GROUP_NAME");
        public final static Property InvitationGroupAvatar = new Property(19, String.class, "invitationGroupAvatar", false, "INVITATION_GROUP_AVATAR");
        public final static Property InvitationPeople = new Property(20, String.class, "invitationPeople", false, "INVITATION_PEOPLE");
        public final static Property ChatType = new Property(21, int.class, "chatType", false, "CHAT_TYPE");
    }


    public ChatMessageEventDao(DaoConfig config) {
        super(config);
    }
    
    public ChatMessageEventDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_MESSAGE_EVENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FROM_USER_ID\" TEXT," + // 1: fromUserID
                "\"TO_USER_ID\" TEXT," + // 2: toUserID
                "\"MESSAGE_CONTENT\" TEXT," + // 3: messageContent
                "\"MESSAGE_TYPE\" INTEGER NOT NULL ," + // 4: messageType
                "\"IMAGE_HEIGHT\" INTEGER NOT NULL ," + // 5: imageHeight
                "\"IMAGE_WIDTH\" INTEGER NOT NULL ," + // 6: imageWidth
                "\"VOICE_DURATION\" INTEGER NOT NULL ," + // 7: voiceDuration
                "\"AVATAR\" TEXT," + // 8: avatar
                "\"NICKNAME\" TEXT," + // 9: nickname
                "\"CHAT_USER_ID\" TEXT," + // 10: chatUserID
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 11: createTime
                "\"VOICE_IS_READ\" INTEGER NOT NULL ," + // 12: voiceIsRead
                "\"RED_ENVELOPES_TITLE\" TEXT," + // 13: redEnvelopesTitle
                "\"GROUP_NICK_NAME\" TEXT," + // 14: groupNickName
                "\"GROUP_NAME\" TEXT," + // 15: groupName
                "\"GROUP_AVATAR\" TEXT," + // 16: groupAvatar
                "\"USER_ID\" INTEGER NOT NULL ," + // 17: userId
                "\"INVITATION_GROUP_NAME\" TEXT," + // 18: invitationGroupName
                "\"INVITATION_GROUP_AVATAR\" TEXT," + // 19: invitationGroupAvatar
                "\"INVITATION_PEOPLE\" TEXT," + // 20: invitationPeople
                "\"CHAT_TYPE\" INTEGER NOT NULL );"); // 21: chatType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_MESSAGE_EVENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChatMessageEvent entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String fromUserID = entity.getFromUserID();
        if (fromUserID != null) {
            stmt.bindString(2, fromUserID);
        }
 
        String toUserID = entity.getToUserID();
        if (toUserID != null) {
            stmt.bindString(3, toUserID);
        }
 
        String messageContent = entity.getMessageContent();
        if (messageContent != null) {
            stmt.bindString(4, messageContent);
        }
        stmt.bindLong(5, entity.getMessageType());
        stmt.bindLong(6, entity.getImageHeight());
        stmt.bindLong(7, entity.getImageWidth());
        stmt.bindLong(8, entity.getVoiceDuration());
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(9, avatar);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(10, nickname);
        }
 
        String chatUserID = entity.getChatUserID();
        if (chatUserID != null) {
            stmt.bindString(11, chatUserID);
        }
        stmt.bindLong(12, entity.getCreateTime());
        stmt.bindLong(13, entity.getVoiceIsRead() ? 1L: 0L);
 
        String redEnvelopesTitle = entity.getRedEnvelopesTitle();
        if (redEnvelopesTitle != null) {
            stmt.bindString(14, redEnvelopesTitle);
        }
 
        String groupNickName = entity.getGroupNickName();
        if (groupNickName != null) {
            stmt.bindString(15, groupNickName);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(16, groupName);
        }
 
        String groupAvatar = entity.getGroupAvatar();
        if (groupAvatar != null) {
            stmt.bindString(17, groupAvatar);
        }
        stmt.bindLong(18, entity.getUserId());
 
        String invitationGroupName = entity.getInvitationGroupName();
        if (invitationGroupName != null) {
            stmt.bindString(19, invitationGroupName);
        }
 
        String invitationGroupAvatar = entity.getInvitationGroupAvatar();
        if (invitationGroupAvatar != null) {
            stmt.bindString(20, invitationGroupAvatar);
        }
 
        String invitationPeople = entity.getInvitationPeople();
        if (invitationPeople != null) {
            stmt.bindString(21, invitationPeople);
        }
        stmt.bindLong(22, entity.getChatType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChatMessageEvent entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String fromUserID = entity.getFromUserID();
        if (fromUserID != null) {
            stmt.bindString(2, fromUserID);
        }
 
        String toUserID = entity.getToUserID();
        if (toUserID != null) {
            stmt.bindString(3, toUserID);
        }
 
        String messageContent = entity.getMessageContent();
        if (messageContent != null) {
            stmt.bindString(4, messageContent);
        }
        stmt.bindLong(5, entity.getMessageType());
        stmt.bindLong(6, entity.getImageHeight());
        stmt.bindLong(7, entity.getImageWidth());
        stmt.bindLong(8, entity.getVoiceDuration());
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(9, avatar);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(10, nickname);
        }
 
        String chatUserID = entity.getChatUserID();
        if (chatUserID != null) {
            stmt.bindString(11, chatUserID);
        }
        stmt.bindLong(12, entity.getCreateTime());
        stmt.bindLong(13, entity.getVoiceIsRead() ? 1L: 0L);
 
        String redEnvelopesTitle = entity.getRedEnvelopesTitle();
        if (redEnvelopesTitle != null) {
            stmt.bindString(14, redEnvelopesTitle);
        }
 
        String groupNickName = entity.getGroupNickName();
        if (groupNickName != null) {
            stmt.bindString(15, groupNickName);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(16, groupName);
        }
 
        String groupAvatar = entity.getGroupAvatar();
        if (groupAvatar != null) {
            stmt.bindString(17, groupAvatar);
        }
        stmt.bindLong(18, entity.getUserId());
 
        String invitationGroupName = entity.getInvitationGroupName();
        if (invitationGroupName != null) {
            stmt.bindString(19, invitationGroupName);
        }
 
        String invitationGroupAvatar = entity.getInvitationGroupAvatar();
        if (invitationGroupAvatar != null) {
            stmt.bindString(20, invitationGroupAvatar);
        }
 
        String invitationPeople = entity.getInvitationPeople();
        if (invitationPeople != null) {
            stmt.bindString(21, invitationPeople);
        }
        stmt.bindLong(22, entity.getChatType());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ChatMessageEvent readEntity(Cursor cursor, int offset) {
        ChatMessageEvent entity = new ChatMessageEvent( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fromUserID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // toUserID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // messageContent
            cursor.getInt(offset + 4), // messageType
            cursor.getInt(offset + 5), // imageHeight
            cursor.getInt(offset + 6), // imageWidth
            cursor.getInt(offset + 7), // voiceDuration
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // avatar
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // nickname
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // chatUserID
            cursor.getLong(offset + 11), // createTime
            cursor.getShort(offset + 12) != 0, // voiceIsRead
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // redEnvelopesTitle
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // groupNickName
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // groupName
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // groupAvatar
            cursor.getLong(offset + 17), // userId
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // invitationGroupName
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // invitationGroupAvatar
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // invitationPeople
            cursor.getInt(offset + 21) // chatType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChatMessageEvent entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFromUserID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setToUserID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMessageContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMessageType(cursor.getInt(offset + 4));
        entity.setImageHeight(cursor.getInt(offset + 5));
        entity.setImageWidth(cursor.getInt(offset + 6));
        entity.setVoiceDuration(cursor.getInt(offset + 7));
        entity.setAvatar(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setNickname(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setChatUserID(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCreateTime(cursor.getLong(offset + 11));
        entity.setVoiceIsRead(cursor.getShort(offset + 12) != 0);
        entity.setRedEnvelopesTitle(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setGroupNickName(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setGroupName(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setGroupAvatar(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setUserId(cursor.getLong(offset + 17));
        entity.setInvitationGroupName(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setInvitationGroupAvatar(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setInvitationPeople(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setChatType(cursor.getInt(offset + 21));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChatMessageEvent entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChatMessageEvent entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChatMessageEvent entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
